@using Entities.Models
@using Entities.ViewModels
@using Entities.ViewModels.Funding
@using Utilities.Contants
@model GenericViewModel<OrderViewModel>

@if (Model != null)
{
<div class="wrap_bg wrap_bg_no-padding mb20">
    <div class="table-responsive table-default table-gray">
        <table class="table table-nowrap">
            <thead>
                <tr>
                    <th style="width: 30px;">STT</th>
                    <th>Mã đơn</th>
                    <th>Ngày bắt đầu - Ngày kết thúc</th>
                    <th>Nhãn đơn</th>
                    <th class="text-right">Thanh toán</th>
                    <th class="text-right">Lợi nhuận</th>
                    <th>Trạng thái</th>
                    <th>
                        Ngày tạo
                        <a class="sort">↓</a>
                    </th>
                    <th>Người tạo</th>
                    <th>Nhân viên chính</th>
                </tr>
            </thead>
            <tbody>
               @if(Model.ListData!=null && Model.ListData.Count > 0)
                {
                    var counter = (Model.CurrentPage - 1) * Model.PageSize;
                   foreach(var item in Model.ListData)
                   {
                            
                       <tr>
                           <td>@(counter++)</td>
                           <td><a class="blue" href="/Order/@item.OrderId">@item.OrderCode</a></td>
                           <td>@item.StartDate - @item.EndDate</td>
                           <td>@item.Note</td>
                           <td class="text-right">
                               @if (item.TotalAmount != 0)
                               {<div class="green">@(((double)item.TotalAmount).ToString("###,###,###"))/</div>}
                               else
                               { <div class="green">0/</div>}
                               <div class="red">@(item.Amount == 0 ? "0": item.Amount.ToString("###,###,###")) </div>
                           </td>
                           <td class="text-right">@item.Profit.ToString("###,###,###")</td>
                           <td>
                            
                               @switch (Convert.ToInt32(item.StatusCode))
                               {
                                   case (int)(OrderStatus.CREATED_ORDER):
                                       {
                                           <span class="status-oranger">@item.Status</span>
                                       }
                                       break;
                                   case (int)(OrderStatus.CONFIRMED_SALE):
                                   case (int)(OrderStatus.WAITING_FOR_OPERATOR):

                                       {
                                           <div class="status-green">@(item.PermisionTypeName==null|| item.PermisionTypeName.Trim() == "" ? "Không công nợ": item.PermisionTypeName) - @item.PaymentStatusName</div>

                                       }
                                       break;
                                   case (int)(OrderStatus.WAITING_FOR_ACCOUNTANT):
                                   case (int)(OrderStatus.FINISHED):
                                       {
                                           <span class="status-green">@item.Status</span>
                                       }
                                       break;
                                   case ((int)(OrderStatus.CANCEL)):
                                   case ((int)(OrderStatus.ACCOUNTANT_DECLINE)):
                                   case ((int)(OrderStatus.OPERATOR_DECLINE)):
                                   case ((int)(OrderStatus.DonRac)):
                                       {
                                           <span class="status-red">@item.Status</span>
                                       }
                                       break;
                               }


                           </td>
                           <td> @item.CreateDate</td>
                            <td>@item.CreateName</td>
                            <td>@item.SalerName</td>
                       </tr>

                   }
                }
            </tbody>
        </table>
    </div>

    @await Component.InvokeAsync("Paging", new
    {
        pageModel = new Paging()
        {
            TotalRecord = Model.TotalRecord,
            TotalPage = Model.TotalPage,
            CurrentPage = Model.CurrentPage,
            PageSize = Model.PageSize,
            RecordName = "Hóa đơn",
            PageAction = "_customer_manager.OrederOnPaging({0})"
        }
    })
</div> }
            else
            {
<div class="wrap_bg wrap_bg_no-padding mb20">
    <div class="table-responsive table-default table-gray">
        <table class="table table-nowrap">
            <thead>
                <tr>
                    <th style="width: 30px;">STT</th>
                    <th>Mã đơn</th>
                    <th>Ngày bắt đầu - Ngày kết thúc</th>
                    <th>Nhãn đơn</th>
                    <th class="text-right">Thanh toán</th>
                    <th class="text-right">Lợi nhuận</th>
                    <th>Trạng thái</th>
                    <th>
                        Ngày tạo
                        <a class="sort">↓</a>
                    </th>
                    <th>Người tạo</th>
                    <th>Nhân viên chính</th>

                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>}
